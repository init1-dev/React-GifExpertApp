{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","categories","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","includes","alert","cats","type","name","id","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAwCeA,EArCK,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAE/B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OACI,sBAAMC,SAhBW,SAAEC,GACnBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IACxBT,EAAWU,SAASP,IACnBQ,MAAM,+BACNP,EAAc,MAEdH,GAAe,SAAAW,GAAI,OAAMT,GAAN,mBAAqBS,OACxCR,EAAc,OAMtB,SACI,uBACIS,KAAK,OACLC,KAAK,aACLC,GAAG,aACHC,YAAY,oBACZC,MAAQd,EACRe,SA3Bc,SAAEZ,GACxBF,EAAeE,EAAEa,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRiB,MAAOD,EAAIC,OAAS,oBACpBT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPM,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAEjC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAMd,EAAMe,IAAMN,IACvB,4BAAKA,QCHJO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAEtB,ECHwB,SAAEA,GAE1B,MAA0BnB,mBAAS,CAC/B0B,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAW,WAEPvB,EAASC,GACJuB,MAAM,SAAAC,GAEHH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAItB,CAAEnB,IAEEoB,EDjB0BK,CAAczB,GAAlCY,EAAb,EAAQL,KAAaY,EAArB,EAAqBA,QAErB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDf,EAArD,OAEEmB,GAAW,mBAAGJ,UAAU,mCAAb,uBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOH,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIhB,aEiBvBgC,EA/BM,WAEjB,IAEA,EAAsC7C,mBAFjB,CAAC,cAEtB,mBAAQF,EAAR,KAAoBC,EAApB,KAEA,OACI,qCACI,oBAAImC,UAAU,8CAAd,0BACA,cAAC,EAAD,CACIpC,WAAaA,EACbC,cAAgBA,IAEpB,uBAIA,6BAEQD,EAAW8B,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MClBlC2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.85b6e749.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CategoryAdd = ({ categories, setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    };\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        // This could be done as helper function\r\n        if( inputValue.trim().length > 2 && !undefined ) {\r\n            if(categories.includes(inputValue)) {\r\n                alert('This category already exist');\r\n                setInputValue('');\r\n            } else {\r\n                setCategories( cats => [ inputValue, ...cats ] );\r\n                setInputValue('');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                name=\"categories\"\r\n                id=\"categories\"\r\n                placeholder=\"Search Categories\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default CategoryAdd;\r\n\r\nCategoryAdd.propTypes = {\r\n    categories: PropTypes.array.isRequired,\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async( category ) => {\r\n        \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=Wv4yr5OXKVpUZ3WWJLls2U9MIMQP4mX4`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title || '<Title not found>',\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading..</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem\r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n};","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    useEffect( () => {\r\n        \r\n        getGifs( category )\r\n            .then( imgs => {\r\n                \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }, [ category ]);\r\n\r\n    return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport CategoryAdd from './components/CategoryAdd';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const initialState = ['One Piece'];\r\n\r\n    const [ categories, setCategories ] = useState(initialState);\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"title animate__animated animate__rubberBand\">GifExpertApp</h2>\r\n            <CategoryAdd\r\n                categories={ categories } \r\n                setCategories={ setCategories }\r\n            />\r\n            <hr />\r\n\r\n            \r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category =>\r\n                        <GifGrid\r\n                            key={ category } \r\n                            category={ category }\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n\r\n// <li key={ category }> { category } </li>\r\n\r\n// const handleDel = (e) => {\r\n//     const name = e.target.id;\r\n//     setCategories( categories.filter(el => el !== name) );\r\n// }\r\n\r\n/* <button className=\"cat-btnDel\" id={category} onClick={ handleDel }> X </button> */","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}