{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","categories","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","getGifs","category","limit","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","onClick","name","filter","el","GifExpertApp","defaultCategories","ReactDOM","render","document","getElementById"],"mappings":"qMAoCeA,EAjCK,SAAC,GAAkC,EAAhCC,WAAiC,IAArBC,EAAoB,EAApBA,cAE/B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAAEC,GACnBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAKlB,SAEI,uBACIO,KAAK,OAGLC,YAAY,oBACZC,MAAQV,EACRW,SAvBc,SAAER,GACxBF,EAAeE,EAAES,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAOC,EAAUC,GAAjB,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWJ,GAF/C,kBAEqEC,EAFrE,sDAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,OAAS,oBACpBV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,wDCGPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCFJO,EAAU,SAAC,GAA6C,IAA3CpB,EAA0C,EAA1CA,SAAUjB,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAE5C,ECLwB,SAAEgB,EAAUC,GAEpC,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAW,WAEPzB,EAASC,EAAUC,GACdwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAAErB,EAAUC,IAERqB,EDf0BK,CAAc3B,EAAU,IAA5Cc,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAOrB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,UACMjB,EACF,wBAAQiB,UAAU,aAAaL,GAAIZ,EAAU4B,QATvC,SAACvC,GACf,IAAMwC,EAAOxC,EAAES,OAAOc,GACtB5B,EAAeD,EAAW+C,QAAO,SAAAC,GAAE,OAAIA,IAAOF,OAOtC,oBAIFR,GAAW,mBAAGJ,UAAU,mCAAb,uBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEMvBoB,EA/BM,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,EAEjD,EAAsChD,mBAAUgD,GAAhD,mBAAQlD,EAAR,KAAoBC,EAApB,KAEA,OACI,qCACI,oBAAIiC,UAAU,8CAAd,0BACA,cAAC,EAAD,CACIlC,WAAaA,EACbC,cAAgBA,IAEpB,uBAIA,6BAEQD,EAAW2B,KAAK,SAAAV,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,EACXjB,WAAaA,EACbC,cAAgBA,GAHVgB,Y,MChBlCkC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d25df2b9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CategoryAdd = ({ categories, setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    };\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        // This could be done as helper function\r\n        if( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [ inputValue, ...cats ] );\r\n            setInputValue('');\r\n        };\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            {/* <p>{ inputValue }</p> */}\r\n            <input\r\n                type=\"text\"\r\n                // name=\"categories\"\r\n                // id=\"categories\"\r\n                placeholder=\"Search Categories\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default CategoryAdd;\r\n\r\nCategoryAdd.propTypes = {\r\n    // categories: PropTypes.array.isRequired,\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async( category, limit ) => {\r\n        \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=${ limit }&api_key=Wv4yr5OXKVpUZ3WWJLls2U9MIMQP4mX4`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title || '<Title not found>',\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category, categories, setCategories }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category, 15 );\r\n\r\n    const handleDel = (e) => {\r\n        const name = e.target.id;\r\n        setCategories( categories.filter(el => el !== name) );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">\r\n                { category }\r\n                <button className=\"cat-btnDel\" id={category} onClick={ handleDel }> X </button>\r\n            </h3>\r\n\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading..</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem\r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired,\r\n    categories: PropTypes.array.isRequired,\r\n    setCategories: PropTypes.func.isRequired\r\n}","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category, limit ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    useEffect( () => {\r\n        \r\n        getGifs( category, limit )\r\n            .then( imgs => {\r\n                \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }, [ category, limit ]);\r\n\r\n    return state;\r\n};","import React, { useState } from 'react';\r\nimport CategoryAdd from './components/CategoryAdd';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = ({ defaultCategories = [] }) => {\r\n\r\n    const [ categories, setCategories ] = useState( defaultCategories );\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"title animate__animated animate__rubberBand\">GifExpertApp</h2>\r\n            <CategoryAdd\r\n                categories={ categories } \r\n                setCategories={ setCategories }\r\n            />\r\n            <hr />\r\n\r\n            \r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category =>\r\n                        <GifGrid\r\n                            key={ category } \r\n                            category={ category }\r\n                            categories={ categories }\r\n                            setCategories={ setCategories }\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport GifExpertApp from './GifExpertApp';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <GifExpertApp />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}